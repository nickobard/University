<?php declare(strict_types=1);

namespace Books\Model;

use Books\Database\Database;

abstract class AbstractModel implements ModelInterface
{
    use IdentifiableTrait;

    /**
     * Get all entities in database
     * @return AbstractModel[]|null
     */
    public static function all(): ?array
    {
        // get table name
        $tableName = static::getTableName();

        // prepare query
        $query = "SELECT * FROM $tableName";

        // prepare statement
        $statement = Database::getConnection()->prepare($query);

        // execute query with parameters
        if (!$statement->execute()) {
            return null;
        }

        // fetch data from executed statement
        $data = $statement->fetchAll();

        return array_map(fn(array $row): AbstractModel => static::fromArray($row), $data);
    }

    /**
     * @param string $column
     * @param string|int|float $value
     * @return AbstractModel|null
     */
    public static function findBy(string $column, string|int|float $value): ?AbstractModel
    {
        // get table name
        $tableName = static::getTableName();

        // prepare query
        $query = "SELECT * FROM $tableName WHERE {$column} = :{$column}";

        // prepare statement
        $statement = Database::getConnection()->prepare($query);

        // execute query with parameters
        if (!$statement->execute([$column => $value])) {
            return null;
        }

        // fetch data from executed statement
        $data = $statement->fetch();

        if ($data === false) {
            return null;
        }

        return static::fromArray($data);
    }

    /**
     * Find entity in database by its identifier
     * @param int $id
     * @return AbstractModel|null
     */
    public static function find(int $id): ?AbstractModel
    {
        return static::findBy('id', $id);
    }

    /**
     * Delete entity from database by its identifier
     * @return bool
     */
    public function delete(): bool
    {
        // get table name
        $tableName = static::getTableName();

        // prepare query
        $query = "DELETE FROM $tableName WHERE id = :id";

        // prepare statement
        $statement = Database::getConnection()->prepare($query);

        // execute query with parameters
        if (!$statement->execute(['id' => $this->id])) {
            return false;
        }

        return true;
    }

    /**
     * Save entity
     * @return bool
     */
    public function save(): bool
    {
        // get table name
        $tableName = static::getTableName();

        // get data to persist
        $data = static::toArray();
        if ($this->id === null) unset($data['id']);

        // prepare column names as string
        $columns = implode(", ", array_keys($data)); // "key1, key2, key3"

        // prepare placeholders for values
        $placeholders = implode(", ", array_map(fn(string $column): string => ":$column", array_keys($data))); // ":key1, :key2, :key3"

        // if current entity has no identifier, create it, update it otherwise
        if ($this->id === null) {
            // prepare create query
            $query = "INSERT INTO $tableName ($columns) VALUES ($placeholders)";
        } else {
            // prepare update query
            $query = "UPDATE $tableName SET ($columns) = ($placeholders) WHERE id = :id";
        }

        // prepare statement
        $statement = Database::getConnection()->prepare($query);

        // execute query with parameters
        if (!$statement->execute(array_values($data))) {
            return false;
        }

        // set identifier generated by database
        if ($this->id === null) {
            $this->id = (int)Database::getConnection()->lastInsertId($this->getSequenceName());
        }

        return true;
    }

    /** @inheritDoc */
    public static function getSequenceName(): string
    {
        return static::getTableName() . "_id_seq";
    }
}

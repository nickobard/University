<?php declare(strict_types=1);

namespace App\Model;

use App\Db;

class Transaction extends AbstractModel
{

    public function __construct(
        protected Account $from,
        protected Account $to,
        protected float   $amount,
        int               $id = null
    )
    {
        $this->id = $id;
    }

    /**
     * Creates DB table using CREATE TABLE ...
     */
    public static function createTable(): void
    {
        $tableName = static::getTableName();

        Db::get()->query("CREATE TABLE IF NOT EXISTS $tableName (
            id serial not null constraint transaction_pk primary key,
            account_from integer not null,
            account_to integer not null,
            amount double precision not null
        )");
    }

    /**
     * Drops DB table using DROP TABLE ...
     */
    public static function dropTable(): void
    {
        $tableName = static::getTableName();

        Db::get()->query("DROP TABLE IF EXISTS $tableName");
    }

    /**
     * Insert this instance into DB table `transaction`
     *
     * @return int|null inserted item autogenerated ID
     */
    public function insert(): ?int
    {
        $tableName = static::getTableName();

        if (is_null($this->id)) {
            $query = "INSERT INTO $tableName (account_from, account_to, amount) VALUES (:account_from, :account_to, :amount)";
            $data = ['account_from' => $this->from->getId(), 'account_to' => $this->to->getId(), 'amount' => $this->amount];
        } else {
            $query = "UPDATE $tableName SET (account_from, account_to, amount) = (:account_from, :account_to, :amount) 
            WHERE id = :id";
            $data = ['account_from' => $this->from->getId(), 'account_to' => $this->to->getId(), 'amount' => $this->amount, 'id' => $this->id];
        }

        $statement = Db::get()->prepare($query);

        if (!$statement->execute($data))
            return null;

        if (is_null($this->id))
            $this->id = intval(Db::get()->lastInsertId());
        return $this->id;
    }

    public static function fromArray(array $data): ?Transaction
    {
        if (!isset($data['id']) || !isset($data['account_from']) || !isset($data['account_to']) || !isset($data['amount']))
            return null;
        return new Transaction(from: Account::findById($data['account_from']),
            to: Account::findById($data['account_to']),
            amount: floatval($data['amount']), id: $data['id']);
    }


    public function getFrom(): Account
    {
        return $this->from;
    }

    public function setFrom(Account $from): Transaction
    {
        $this->from = $from;
        return $this;
    }

    public function getTo(): Account
    {
        return $this->to;
    }

    public function setTo(Account $to): Transaction
    {
        $this->to = $to;
        return $this;
    }

    public function getAmount(): float
    {
        return $this->amount;
    }

    public function setAmount(float $amount): Transaction
    {
        $this->amount = $amount;
        return $this;
    }

    public static final function getTableName(): string
    {
        return "transaction";
    }
}
